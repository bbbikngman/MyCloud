pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK11'
    }
    
    stages {
        stage('Build Backend') {
            steps {
                dir('FreeCloud/cloudServer') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Test Backend') {
            steps {
                dir('FreeCloud/cloudServer') {
                    sh 'mvn test'
                }
            }
        }
        
        stage('Deploy Backend') {
            steps {
                dir('FreeCloud/cloudServer') {
                    sh '''
                        # Copy the JAR
                        cp target/*.jar /opt/myapp/cloudServer.jar
                        
                        # Ensure log directory exists
                        mkdir -p /opt/myapp/logs
                        touch /opt/myapp/logs/application.log
                        chown -R jenkins:jenkins /opt/myapp/logs
                        
                        # Reload systemd
                        sudo systemctl daemon-reload
                        
                        # Restart the service
                        sudo systemctl restart myapp
                        
                        # Check status
                        sudo systemctl status myapp
                        
                        # Start log capture in background
                        tail -f /opt/myapp/logs/application.log > ${WORKSPACE}/spring-boot.log &
                        TAIL_PID=$!
                        
                        # Verify application is running
                        sleep 10
                        curl http://localhost:8080/actuator/health || exit 1
                        
                        # Keep collecting logs for a bit to capture startup
                        sleep 30
                        kill $TAIL_PID
                    '''
                }
                // Archive the logs
                archiveArtifacts artifacts: 'spring-boot.log', followSymlinks: false
            }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
